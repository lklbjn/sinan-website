name: push-image-docker-registry

on:
  push:
    branches:
      - main
      - develop
    tags:
      - '*'
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    environment: RUNTIME
    env:
      REGISTRY: docker.io
      NAMESPACE: sparkly999
      IMAGE_NAME: sinan-website
      REGISTRY_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
      REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
    steps:
      # 拉取代码
      - uses: actions/checkout@v4

      # 设置NPM
      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 运行构建
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Verify dist directory
        run: |
          echo "Checking dist directory..."
          ls -la dist/
          if [ -d "dist" ]; then
            echo "✅ Dist directory created successfully"
            echo "📦 Dist directory size: $(du -sh dist/ | cut -f1)"
          else
            echo "❌ Dist directory not found!"
            exit 1
          fi

      - name: Upload Dist Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Set SHORT_SHA
        id: vars
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{env.NAMESPACE}}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ github.ref_name }}-${{ env.SHORT_SHA }}
            type=raw,value=${{ github.ref_name }}
          labels: |
            maintainer=peixy_j@163.com
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.ref.name=${{ github.ref_name }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}